<HTML>
<HEAD>
<Title>Contour Interpolation</Title>
<link type='text/css' rel='Stylesheet' href="maxchartapi.css" />
</HEAD>
<body bgcolor="#FFFFFF" text="#000000" topmargin="0" leftmargin="0" rightmargin="0" marginwidth="0" marginheight="0">

<p class="heading0">ChartDirector 5.1 (Python Edition)</p>
<p class="heading1">Contour Interpolation</p>
<hr class="separator">
<div class="content">
<img src="images/contourinterpolate0.jpg">&nbsp;&nbsp;<img src="images/contourinterpolate1.jpg">&nbsp;&nbsp;<img src="images/contourinterpolate2.jpg">&nbsp;&nbsp;<img src="images/contourinterpolate3.jpg">
<br><br>
This example demonstrates spline and linear surface interpolation, and discrete and continuous coloring.<br><br>
The data points for the contour layer are the z values at certain (x, y) points. However, to draw the contour and to color the layer, it is necessarily to know the z values at all pixels in the xy plane. ChartDirector uses surface interpolation to compute the z values at all pixels from the given data points. Two types of interpolation - spline and linear - are supported. They can be configured using <a href="ContourLayer.setSmoothInterpolation.htm">ContourLayer.setSmoothInterpolation</a>.<br><br>
The coloring of the contour layer can be discrete or continuous, configurable using <a href="ColorAxis.setColorGradient.htm">ColorAxis.setColorGradient</a>.
</div>
<p class="heading1a">Source Code Listing</p>
<div class="content">
<b>[Standalone Version]</b> pythondemo\contourinterpolate.py
<table width="98%" border="0" cellpadding="10"><tr><td bgcolor="#cccccc"><pre>#!/usr/bin/python
from pychartdir import *
import math

def createChart(img) :

    # The x and y coordinates of the grid
    dataX = [-4, -3, -2, -1, 0, 1, 2, 3, 4]
    dataY = [-4, -3, -2, -1, 0, 1, 2, 3, 4]

    # The values at the grid points. In this example, we will compute the values
    # using the formula z = Sin(x * pi / 3) * Sin(y * pi / 3).
    dataZ = [0] * (len(dataX) * len(dataY))
    for yIndex in range(0, len(dataY)) :
        y = dataY[yIndex]
        for xIndex in range(0, len(dataX)) :
            x = dataX[xIndex]
            dataZ[yIndex * len(dataX) + xIndex] = math.sin(x * 3.1416 / 3
                ) * math.sin(y * 3.1416 / 3)

    # Create a XYChart object of size 360 x 360 pixels
    c = XYChart(360, 360)

    # Set the plotarea at (30, 25) and of size 300 x 300 pixels. Use semi-transparent
    # black (c0000000) for both horizontal and vertical grid lines
    c.setPlotArea(30, 25, 300, 300, -1, -1, -1, 0xc0000000, -1)

    # Add a contour layer using the given data
    layer = c.addContourLayer(dataX, dataY, dataZ)

    # Set the x-axis and y-axis scale
    c.xAxis().setLinearScale(-4, 4, 1)
    c.yAxis().setLinearScale(-4, 4, 1)

    if img == "0" :
        # Discrete coloring, spline surface interpolation
        c.addTitle("Spline Surface - Discrete Coloring", "arialbi.ttf", 12)
    elif img == "1" :
        # Discrete coloring, linear surface interpolation
        c.addTitle("Linear Surface - Discrete Coloring", "arialbi.ttf", 12)
        layer.setSmoothInterpolation(0)
    elif img == "2" :
        # Smooth coloring, spline surface interpolation
        c.addTitle("Spline Surface - Continuous Coloring", "arialbi.ttf", 12)
        layer.setContourColor(Transparent)
        layer.colorAxis().setColorGradient(1)
    else :
        # Discrete coloring, linear surface interpolation
        c.addTitle("Linear Surface - Continuous Coloring", "arialbi.ttf", 12)
        layer.setSmoothInterpolation(0)
        layer.setContourColor(Transparent)
        layer.colorAxis().setColorGradient(1)

    # Output the chart
    c.makeChart("contourinterpolate%s.jpg" % img)


createChart("0")
createChart("1")
createChart("2")
createChart("3")</pre></td></tr></table><br><b>[CGI Version]</b> pythondemo_cgi\contourinterpolate.py
<table width="98%" border="0" cellpadding="10"><tr><td bgcolor="#cccccc"><pre>#!/usr/bin/python
from pychartdir import *
import cgi, math

# Get HTTP query parameters
query = cgi.FieldStorage()

# The x and y coordinates of the grid
dataX = [-4, -3, -2, -1, 0, 1, 2, 3, 4]
dataY = [-4, -3, -2, -1, 0, 1, 2, 3, 4]

# The values at the grid points. In this example, we will compute the values using
# the formula z = Sin(x * pi / 3) * Sin(y * pi / 3).
dataZ = [0] * (len(dataX) * len(dataY))
for yIndex in range(0, len(dataY)) :
    y = dataY[yIndex]
    for xIndex in range(0, len(dataX)) :
        x = dataX[xIndex]
        dataZ[yIndex * len(dataX) + xIndex] = math.sin(x * 3.1416 / 3) * math.sin(
            y * 3.1416 / 3)

# Create a XYChart object of size 360 x 360 pixels
c = XYChart(360, 360)

# Set the plotarea at (30, 25) and of size 300 x 300 pixels. Use semi-transparent
# black (c0000000) for both horizontal and vertical grid lines
c.setPlotArea(30, 25, 300, 300, -1, -1, -1, 0xc0000000, -1)

# Add a contour layer using the given data
layer = c.addContourLayer(dataX, dataY, dataZ)

# Set the x-axis and y-axis scale
c.xAxis().setLinearScale(-4, 4, 1)
c.yAxis().setLinearScale(-4, 4, 1)

if query["img"].value == "0" :
    # Discrete coloring, spline surface interpolation
    c.addTitle("Spline Surface - Discrete Coloring", "arialbi.ttf", 12)
elif query["img"].value == "1" :
    # Discrete coloring, linear surface interpolation
    c.addTitle("Linear Surface - Discrete Coloring", "arialbi.ttf", 12)
    layer.setSmoothInterpolation(0)
elif query["img"].value == "2" :
    # Smooth coloring, spline surface interpolation
    c.addTitle("Spline Surface - Continuous Coloring", "arialbi.ttf", 12)
    layer.setContourColor(Transparent)
    layer.colorAxis().setColorGradient(1)
else :
    # Discrete coloring, linear surface interpolation
    c.addTitle("Linear Surface - Continuous Coloring", "arialbi.ttf", 12)
    layer.setSmoothInterpolation(0)
    layer.setContourColor(Transparent)
    layer.colorAxis().setColorGradient(1)

# Output the chart
print("Content-type: image/jpeg\n")
binaryPrint(c.makeChart2(JPG))</pre></td></tr></table>
</div>
<br><hr class="separator"><div class="copyright">&copy; 2014 Advanced Software Engineering Limited. All rights reserved.</div>
</body>
</HTML>
