<HTML>
<HEAD>
<Title>Surface Shading</Title>
<link type='text/css' rel='Stylesheet' href="maxchartapi.css" />
</HEAD>
<body bgcolor="#FFFFFF" text="#000000" topmargin="0" leftmargin="0" rightmargin="0" marginwidth="0" marginheight="0">

<p class="heading0">ChartDirector 5.1 (Python Edition)</p>
<p class="heading1">Surface Shading</p>
<hr class="separator">
<div class="content">
<img src="images/surfaceshading0.jpg">&nbsp;&nbsp;<img src="images/surfaceshading1.jpg">&nbsp;&nbsp;<img src="images/surfaceshading2.jpg">&nbsp;&nbsp;<img src="images/surfaceshading3.jpg">
<br><br>
This example demonstrates the effects of various surface shading methods, configured using <a href="SurfaceChart.setShadingMode.htm">SurfaceChart.setShadingMode</a>.
</div>
<p class="heading1a">Source Code Listing</p>
<div class="content">
<b>[Standalone Version]</b> pythondemo\surfaceshading.py
<table width="98%" border="0" cellpadding="10"><tr><td bgcolor="#cccccc"><pre>#!/usr/bin/python
from pychartdir import *
import math

def createChart(img) :

    # The x and y coordinates of the grid
    dataX = [-10, -8, -6, -4, -2, 0, 2, 4, 6, 8, 10]
    dataY = [-10, -8, -6, -4, -2, 0, 2, 4, 6, 8, 10]

    # The values at the grid points. In this example, we will compute the values
    # using the formula z = x * sin(y) + y * sin(x).
    dataZ = [0] * (len(dataX) * len(dataY))
    for yIndex in range(0, len(dataY)) :
        y = dataY[yIndex]
        for xIndex in range(0, len(dataX)) :
            x = dataX[xIndex]
            dataZ[yIndex * len(dataX) + xIndex] = x * math.sin(y) + y * math.sin(x)

    # Create a SurfaceChart object of size 380 x 400 pixels, with white (ffffff)
    # background and grey (888888) border.
    c = SurfaceChart(380, 400, 0xffffff, 0x888888)

    # Demonstrate various shading methods
    if img == "0" :
        c.addTitle("11 x 11 Data Points\nSmooth Shading")
    elif img == "1" :
        c.addTitle("11 x 11 Points - Spline Fitted to 50 x 50\nSmooth Shading")
        c.setInterpolation(50, 50)
    elif img == "2" :
        c.addTitle("11 x 11 Data Points\nRectangular Shading")
        c.setShadingMode(RectangularShading)
    else :
        c.addTitle("11 x 11 Data Points\nTriangular Shading")
        c.setShadingMode(TriangularShading)

    # Set the center of the plot region at (175, 200), and set width x depth x height
    # to 200 x 200 x 160 pixels
    c.setPlotRegion(175, 200, 200, 200, 160)

    # Set the plot region wall thichness to 5 pixels
    c.setWallThickness(5)

    # Set the elevation and rotation angles to 45 and 60 degrees
    c.setViewAngle(45, 60)

    # Set the perspective level to 35
    c.setPerspective(35)

    # Set the data to use to plot the chart
    c.setData(dataX, dataY, dataZ)

    # Set contour lines to semi-transparent black (c0000000)
    c.setContourColor(0xc0000000)

    # Output the chart
    c.makeChart("surfaceshading%s.jpg" % img)


createChart("0")
createChart("1")
createChart("2")
createChart("3")</pre></td></tr></table><br><b>[CGI Version]</b> pythondemo_cgi\surfaceshading.py
<table width="98%" border="0" cellpadding="10"><tr><td bgcolor="#cccccc"><pre>#!/usr/bin/python
from pychartdir import *
import cgi, math

# Get HTTP query parameters
query = cgi.FieldStorage()

# The x and y coordinates of the grid
dataX = [-10, -8, -6, -4, -2, 0, 2, 4, 6, 8, 10]
dataY = [-10, -8, -6, -4, -2, 0, 2, 4, 6, 8, 10]

# The values at the grid points. In this example, we will compute the values using
# the formula z = x * sin(y) + y * sin(x).
dataZ = [0] * (len(dataX) * len(dataY))
for yIndex in range(0, len(dataY)) :
    y = dataY[yIndex]
    for xIndex in range(0, len(dataX)) :
        x = dataX[xIndex]
        dataZ[yIndex * len(dataX) + xIndex] = x * math.sin(y) + y * math.sin(x)

# Create a SurfaceChart object of size 380 x 400 pixels, with white (ffffff)
# background and grey (888888) border.
c = SurfaceChart(380, 400, 0xffffff, 0x888888)

# Demonstrate various shading methods
if query["img"].value == "0" :
    c.addTitle("11 x 11 Data Points\nSmooth Shading")
elif query["img"].value == "1" :
    c.addTitle("11 x 11 Points - Spline Fitted to 50 x 50\nSmooth Shading")
    c.setInterpolation(50, 50)
elif query["img"].value == "2" :
    c.addTitle("11 x 11 Data Points\nRectangular Shading")
    c.setShadingMode(RectangularShading)
else :
    c.addTitle("11 x 11 Data Points\nTriangular Shading")
    c.setShadingMode(TriangularShading)

# Set the center of the plot region at (175, 200), and set width x depth x height to
# 200 x 200 x 160 pixels
c.setPlotRegion(175, 200, 200, 200, 160)

# Set the plot region wall thichness to 5 pixels
c.setWallThickness(5)

# Set the elevation and rotation angles to 45 and 60 degrees
c.setViewAngle(45, 60)

# Set the perspective level to 35
c.setPerspective(35)

# Set the data to use to plot the chart
c.setData(dataX, dataY, dataZ)

# Set contour lines to semi-transparent black (c0000000)
c.setContourColor(0xc0000000)

# Output the chart
print("Content-type: image/jpeg\n")
binaryPrint(c.makeChart2(JPG))</pre></td></tr></table>
</div>
<br><hr class="separator"><div class="copyright">&copy; 2014 Advanced Software Engineering Limited. All rights reserved.</div>
</body>
</HTML>
